{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/adam/Desktop/simpleContextState/simple-context-state/application/src/package/use-simple-provider.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useReducer } from \"react\";\nimport { ContextDevTool } from \"react-context-devtool\"; // Initial state\n\nconst stores = {\n  errors: [],\n  pending: []\n};\n/** PROVIDER CONTEXT */\n\nexport const SimpleProvider = ({ ...root\n}) => {\n  _s();\n\n  const AppReducer = (state, action) => {\n    if (action.type) return action.payload;else return state;\n  };\n\n  const [state, dispatch] = useReducer(AppReducer, stores);\n  root.stores.map(store => stores[store.name] = store.initialState);\n\n  const addPending = type => {\n    const actionPending = state.pending.find(action => action === type);\n\n    if (!actionPending) {\n      const newState = { ...state,\n        pending: [...state.pending, type]\n      };\n      dispatch({\n        type: `${type}/pending`,\n        payload: newState\n      });\n    }\n  };\n\n  const addError = (type, message) => {\n    const pending = state.pending.filter(action => action !== type);\n    const newState = { ...state,\n      pending,\n      errors: [...state.errors, {\n        type,\n        message: message.toString()\n      }]\n    };\n    dispatch({\n      type: `${type}/error`,\n      payload: newState\n    });\n  };\n\n  const errors_clear = (...errors) => {\n    let newErrors = [];\n\n    if (!errors.length) {\n      const newState = { ...state,\n        errors: newErrors\n      };\n      dispatch({\n        type: `clearAllErrors`,\n        payload: newState\n      });\n    }\n  };\n\n  const dispatchAction = (type, store, payload) => {\n    const errors = state.errors.filter(error => error.type !== type);\n    const pending = state.pending.filter(action => action !== type);\n    dispatch({\n      type,\n      payload: { ...state,\n        errors,\n        pending,\n        [store.name]: payload\n      }\n    });\n  };\n\n  const actions = {\n    errors_clear\n  };\n  root.stores.map(store => {\n    if (store.actions) {\n      for (const [key, value] of Object.entries(store.actions)) {\n        const type = `${store.name}_${key}`;\n        const action = value(state[store.name]);\n\n        actions[type] = payload => dispatchAction(type, store, action(payload));\n      }\n    }\n\n    if (store.asyncActions) {\n      for (const [key, value] of Object.entries(store.actions)) {\n        const type = `${store.name}_${key}`;\n        const action = value(state[store.name]);\n\n        actions[type] = async data => {\n          addPending(type);\n\n          try {\n            const response = await action(data);\n            const payload = await response();\n            dispatchAction(type, store, payload);\n          } catch (err) {\n            addError(type, err);\n          }\n        };\n      }\n    }\n  }); //Create an array which will be an object of each store and its state\n\n  const globalStore = {};\n\n  for (const [key, value] of Object.entries(stores)) {\n    globalStore[key] = state[key];\n  }\n\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: { ...actions,\n      ...globalStore\n    },\n    children: [root.component, /*#__PURE__*/_jsxDEV(ContextDevTool, {\n      context: GlobalContext,\n      id: \"simpleState\",\n      displayName: \"Simple State\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n}; // Create context\n\n_s(SimpleProvider, \"KsN4ONY+4elALXqBvfMstR+RMk0=\");\n\n_c = SimpleProvider;\nexport const GlobalContext = /*#__PURE__*/createContext(stores);\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleProvider\");","map":{"version":3,"sources":["/home/adam/Desktop/simpleContextState/simple-context-state/application/src/package/use-simple-provider.js"],"names":["React","createContext","useReducer","ContextDevTool","stores","errors","pending","SimpleProvider","root","AppReducer","state","action","type","payload","dispatch","map","store","name","initialState","addPending","actionPending","find","newState","addError","message","filter","toString","errors_clear","newErrors","length","dispatchAction","error","actions","key","value","Object","entries","asyncActions","data","response","err","globalStore","component","GlobalContext"],"mappings":"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","sourcesContent":["import React, { createContext, useReducer } from \"react\";\nimport { ContextDevTool } from \"react-context-devtool\";\n\n// Initial state\nconst stores = {\n  errors: [],\n  pending: [],\n};\n\n/** PROVIDER CONTEXT */\nexport const SimpleProvider = ({ ...root }) => {\n  const AppReducer = (state, action) => {\n    if (action.type) return action.payload;\n    else return state;\n  };\n\n  const [state, dispatch] = useReducer(AppReducer, stores);\n\n  root.stores.map((store) => (stores[store.name] = store.initialState));\n\n  const addPending = (type) => {\n    const actionPending = state.pending.find((action) => action === type);\n    if (!actionPending) {\n      const newState = {\n        ...state,\n        pending: [...state.pending, type],\n      };\n      dispatch({\n        type: `${type}/pending`,\n        payload: newState,\n      });\n    }\n  };\n  const addError = (type, message) => {\n    const pending = state.pending.filter((action) => action !== type);\n    const newState = {\n      ...state,\n      pending,\n      errors: [...state.errors, { type, message: message.toString() }],\n    };\n    dispatch({\n      type: `${type}/error`,\n      payload: newState,\n    });\n  };\n\n  const errors_clear = (...errors) => {\n    let newErrors = [];\n    if (!errors.length) {\n      const newState = {\n        ...state,\n        errors: newErrors,\n      };\n      dispatch({\n        type: `clearAllErrors`,\n        payload: newState,\n      });\n    }\n  };\n\n  const dispatchAction = (type, store, payload) => {\n    const errors = state.errors.filter((error) => error.type !== type);\n    const pending = state.pending.filter((action) => action !== type);\n    dispatch({\n      type,\n      payload: {\n        ...state,\n        errors,\n        pending,\n        [store.name]: payload,\n      },\n    });\n  };\n\n  const actions = { errors_clear };\n\n  root.stores.map((store) => {\n    if (store.actions) {\n      for (const [key, value] of Object.entries(store.actions)) {\n        const type = `${store.name}_${key}`;\n\n        const action = value(state[store.name]);\n        actions[type] = (payload) =>\n          dispatchAction(type, store, action(payload));\n      }\n    }\n    if (store.asyncActions) {\n      for (const [key, value] of Object.entries(store.actions)) {\n        const type = `${store.name}_${key}`;\n        const action = value(state[store.name]);\n        actions[type] = async (data) => {\n          addPending(type);\n          try {\n            const response = await action(data);\n            const payload = await response();\n            dispatchAction(type, store, payload);\n          } catch (err) {\n            addError(type, err);\n          }\n        };\n      }\n    }\n  });\n\n  //Create an array which will be an object of each store and its state\n  const globalStore = {};\n\n  for (const [key, value] of Object.entries(stores)) {\n    globalStore[key] = state[key];\n  }\n\n  return (\n    <GlobalContext.Provider\n      value={{\n        ...actions,\n        ...globalStore,\n      }}\n    >\n      {root.component}\n      <ContextDevTool\n        context={GlobalContext}\n        id=\"simpleState\"\n        displayName=\"Simple State\"\n      />\n    </GlobalContext.Provider>\n  );\n};\n\n// Create context\nexport const GlobalContext = createContext(stores);\n"]},"metadata":{},"sourceType":"module"}