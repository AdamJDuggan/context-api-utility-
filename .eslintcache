[{"/home/adam/Desktop/context-api/src/index.js":"1","/home/adam/Desktop/context-api/src/reportWebVitals.js":"2","/home/adam/Desktop/context-api/src/App.js":"3","/home/adam/Desktop/context-api/src/GlobalContext.js":"4","/home/adam/Desktop/context-api/src/TodosStore.js":"5","/home/adam/Desktop/context-api/src/ConsolesStore.js":"6","/home/adam/Desktop/context-api/src/useErrors.js":"7"},{"size":378,"mtime":1610106387659,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1609762983182,"results":"10","hashOfConfig":"9"},{"size":721,"mtime":1610346330219,"results":"11","hashOfConfig":"9"},{"size":3631,"mtime":1610444635097,"results":"12","hashOfConfig":"9"},{"size":541,"mtime":1610444760854,"results":"13","hashOfConfig":"9"},{"size":247,"mtime":1610444692702,"results":"14","hashOfConfig":"9"},{"size":207,"mtime":1610346400261,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1h5ierx",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},"/home/adam/Desktop/context-api/src/index.js",[],["35","36"],"/home/adam/Desktop/context-api/src/reportWebVitals.js",[],["37","38"],"/home/adam/Desktop/context-api/src/App.js",[],"/home/adam/Desktop/context-api/src/GlobalContext.js",["39","40","41","42"],"import React, { createContext, useReducer } from \"react\";\nimport { ContextDevTool } from \"react-context-devtool\";\n\n// Initial state\nconst stores = {\n  errors: [],\n  pending: [],\n};\n\n/** PROVIDER CONTEXT */\nexport const GlobalProvider = ({ root }) => {\n  //Reducer\n  const AppReducer = (state, action) => {\n    if (action.type) return action.payload;\n    else return state;\n  };\n\n  //Configure the reducer\n  const [state, dispatch] = useReducer(AppReducer, stores);\n\n  //Add all user stores to the global array of stores\n  root.stores.map((store) => (stores[store.name] = store.initialState));\n\n  const addPending = (action) => {\n    const newState = {\n      ...state,\n      pending: [...state.pending, action],\n    };\n    dispatch({\n      type: action,\n      payload: newState,\n    });\n  };\n\n  const removePending = (action) => {\n    const newPending = state.pending.filter((item) => item !== action);\n    console.log(newPending);\n    const newState = {\n      ...state,\n      pending: newPending,\n    };\n    dispatch({ type: `pending/addTodo`, payload: newState });\n  };\n\n  const addError = (action) => {\n    const newState = {\n      ...state,\n      errors: [...state.errors, action],\n    };\n    dispatch({\n      type: `pending/addTodo`,\n      payload: newState,\n    });\n  };\n\n  //Creat an object to which we will add all user actions\n  const actions = {};\n\n  //Map through the users stores\n  root.stores.map((store) => {\n    if (store.actions) {\n      // Find the array of actions in that store\n      for (const [key, value] of Object.entries(store.actions)) {\n        //Pass it the global state\n        const action = value(state[store.name]);\n        //Create string of the action name (to be shown as \"type\" in the reducer)\n        const type = key.toString();\n        //Add this action to the array actions, its callback sends the newState (payload) to the reducer\n        actions[key] = (payload) =>\n          dispatch({\n            type,\n            payload: { ...state, [store.name]: action(payload) },\n          });\n      }\n    }\n    if (store.asyncActions) {\n      //Find the array of async actions in that store\n      for (const [key, value] of Object.entries(store.asyncActions)) {\n        //Create string of the action name (to be shown as \"type\" in the reducer)\n        const type = key.toString();\n        actions[key] = async () => {\n          const action = value(state[store.name]);\n          addPending(type);\n          try {\n            const response = await action();\n            const payload = await response();\n            removePending(type);\n            dispatch({ type, payload: { ...state, [store.name]: payload } });\n          } catch (err) {\n            removePending(type);\n            if (!state.errors.includes(type)) addError(type, err);\n          }\n        };\n      }\n    }\n  });\n\n  //Create an array which will be an object of each store and its state\n  const globalStore = {};\n\n  for (const [key, value] of Object.entries(stores)) {\n    globalStore[key] = state[key];\n  }\n\n  //Async action\n  const asyncAction = async (action, fetch) => {\n    const response = await fetch();\n    action(response);\n  };\n\n  //Errors\n\n  //Pending\n  const errors = stores.errors;\n  const pending = stores.pending;\n\n  return (\n    <GlobalContext.Provider\n      value={{\n        ...actions,\n        ...globalStore,\n        asyncAction,\n      }}\n    >\n      {root.component}\n      <ContextDevTool\n        context={GlobalContext}\n        id=\"uniqContextId\"\n        displayName=\"Context Display Name\"\n      />\n    </GlobalContext.Provider>\n  );\n};\n\n// Create context\nexport const GlobalContext = createContext(stores);\n","/home/adam/Desktop/context-api/src/TodosStore.js",[],"/home/adam/Desktop/context-api/src/ConsolesStore.js",[],"/home/adam/Desktop/context-api/src/useErrors.js",["43","44"],"import React, { useContext } from \"react\";\nimport { GlobalContext } from \"./GlobalContext\";\n\nconst useErrors = (...actions) => {\n  const { errors } = useContext(GlobalContext);\n};\n\nexport default useErrors;\n",["45","46"],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"47","replacedBy":"51"},{"ruleId":"49","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":60,"column":27,"nodeType":"55","messageId":"56","endLine":60,"endColumn":29},{"ruleId":"57","severity":1,"message":"58","line":101,"column":20,"nodeType":"59","messageId":"60","endLine":101,"endColumn":25},{"ruleId":"57","severity":1,"message":"61","line":114,"column":9,"nodeType":"59","messageId":"60","endLine":114,"endColumn":15},{"ruleId":"57","severity":1,"message":"62","line":115,"column":9,"nodeType":"59","messageId":"60","endLine":115,"endColumn":16},{"ruleId":"57","severity":1,"message":"63","line":1,"column":8,"nodeType":"59","messageId":"60","endLine":1,"endColumn":13},{"ruleId":"57","severity":1,"message":"61","line":5,"column":11,"nodeType":"59","messageId":"60","endLine":5,"endColumn":17},{"ruleId":"47","replacedBy":"64"},{"ruleId":"49","replacedBy":"65"},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],["66"],["67"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unused-vars","'value' is assigned a value but never used.","Identifier","unusedVar","'errors' is assigned a value but never used.","'pending' is assigned a value but never used.","'React' is defined but never used.",["66"],["67"],"no-global-assign","no-unsafe-negation"]